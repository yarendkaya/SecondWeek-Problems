Soru 1)val ile var arasındaki fark nedir?
Cevap: Val değer anlamındadır. Get edilebilir ancak set edilmez.Var değişken anlamındadır. Get ve set işlemi yapılabilmektedir.
performans olarak incelersek gerçek hayat projelerinde val daha performanslı iken tek bir threadde işlem yapılıyorsa var
daha performanslı diyebiliriz.


Soru 2)Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz?
Örnek bir senaryo verin.
Cevap:var ile oluşturduğum propertynin setter fonksiyonunu private yaparak dışardan erişilmesini engellerim. Bu şekilde bir nevi
val değişken gibi davranır fakat bu tanımlamada propertyi  oluşturduğum class içinde bu setter fonksiyonuna erişebilirim(acces modifiers)
Bundan dolayı oluşturduğum class içinde değişiklik yapıp dışardan değişiklik yapılmasını istemediğim durumlarda kullanabilirim.

Soru 3)"Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez"
değil de "salt okunur" olarak açıklanmalıdır?
Cevap:Val değişkeni immutable değil readonly değişkendir çünkü immutable değişkenlerin içerisindeki değer hiçbir şekilde değiştirilemez .
Ancak  val ile tanımlanan bir değişken getter fonksiyonu ile dışardan bir değere bağlı ise bu değer değiştikçe val değeri de değişir.

Soru 4)"Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?
Cevap: Eğer bir değişkenin tipini yazmadan atama yapıyorsak idenin yorumlayarak bu değişkenin tip çıkarımı yapmasına type
inference denir. Eğer değişkenin değeri sonradan atanacaksa(lateinit) tip belirtmek durumundayız.

Soru 5)Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi?
Arka planda neler oluyor?
Cevap : Kotlin'de yazdığımız kodun bytcode'una ulaşarak incelersek aslında referans tipli
gösterdiğimiz değişkenlerin primitive tipte olduğunu görürüz. Bu durum Kotlin'in arkaplanda yaptığı optimizasyon işlemi
sonucu gelişir.

Soru 6)"Tip Güvenliği" (Type Safety) kavramını açıklayın.
Cevap : Derleyici kodu derlerken hata verir ve değişkenin türü ile atanan değerin türü arasında fark olması durumunda
 kodu derlemez. Buna type safety denir.

Soru 7)Bir değişkeni nullable yapmak için ne yapmalıyız?
Cevap: Bir değişkeni nullable yapmak için değişken tipinin sonuna ? konur.

"Null Güvenliği" (Null Safety) kavramını açıklayın.
Bir değişkene null değer atanır ve tip belirtilmezse Kotlin bu değişkeni nasıl yorumlar?
İlkel bir değişkenin nullable olması ile null değer alamaması arasında bellek yönetimi açısından nasıl farklar vardır?
Nullable bir değişkenin bir değere sahip olması ile null olması arasında bellek yönetimi açısından nasıl bir fark vardır? Null değer almış bir değişken bellekte yer kaplamaz diyebilir miyiz?
Nullable bir değişkenle çalışırken hangi operatörleri kullanırız? Bu operatörlerin kullanım farkları nelerdir? Hangisini ne zaman kullanmak daha anlamlıdır?